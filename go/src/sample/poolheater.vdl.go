// This file was auto-generated by the veyron vdl tool.
// Source: poolheater.vdl

package sample

import (
	// The non-user imports are prefixed with "__" to prevent collisions.
	__veyron2 "veyron.io/veyron/veyron2"
	__context "veyron.io/veyron/veyron2/context"
	__ipc "veyron.io/veyron/veyron2/ipc"
	__vdlutil "veyron.io/veyron/veyron2/vdl/vdlutil"
	__wiretype "veyron.io/veyron/veyron2/wiretype"
)

// TODO(toddw): Remove this line once the new signature support is done.
// It corrects a bug where __wiretype is unused in VDL pacakges where only
// bootstrap types are used on interfaces.
const _ = __wiretype.TypeIDInvalid

// PoolHeaterClientMethods is the client interface
// containing PoolHeater methods.
//
// PoolHeater allows clients to control when the pool is being heated.
type PoolHeaterClientMethods interface {
	// Status retrieves the PoolHeater's status (i.e., active, idle) and temperature.
	Status(__context.T, ...__ipc.CallOpt) (running string, temperature uint64, err error)
	// Start informs the PoolHeater to heat the pool to the given temperature until the duration expires.
	Start(ctx __context.T, temperature uint64, duration uint64, opts ...__ipc.CallOpt) error
	// Stop informs the PoolHeater to cease heating the pool.
	Stop(__context.T, ...__ipc.CallOpt) error
}

// PoolHeaterClientStub adds universal methods to PoolHeaterClientMethods.
type PoolHeaterClientStub interface {
	PoolHeaterClientMethods
	__ipc.UniversalServiceMethods
}

// PoolHeaterClient returns a client stub for PoolHeater.
func PoolHeaterClient(name string, opts ...__ipc.BindOpt) PoolHeaterClientStub {
	var client __ipc.Client
	for _, opt := range opts {
		if clientOpt, ok := opt.(__ipc.Client); ok {
			client = clientOpt
		}
	}
	return implPoolHeaterClientStub{name, client}
}

type implPoolHeaterClientStub struct {
	name   string
	client __ipc.Client
}

func (c implPoolHeaterClientStub) c(ctx __context.T) __ipc.Client {
	if c.client != nil {
		return c.client
	}
	return __veyron2.RuntimeFromContext(ctx).Client()
}

func (c implPoolHeaterClientStub) Status(ctx __context.T, opts ...__ipc.CallOpt) (o0 string, o1 uint64, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Status", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &o1, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implPoolHeaterClientStub) Start(ctx __context.T, i0 uint64, i1 uint64, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Start", []interface{}{i0, i1}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implPoolHeaterClientStub) Stop(ctx __context.T, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Stop", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implPoolHeaterClientStub) Signature(ctx __context.T, opts ...__ipc.CallOpt) (o0 __ipc.ServiceSignature, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Signature", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

// PoolHeaterServerMethods is the interface a server writer
// implements for PoolHeater.
//
// PoolHeater allows clients to control when the pool is being heated.
type PoolHeaterServerMethods interface {
	// Status retrieves the PoolHeater's status (i.e., active, idle) and temperature.
	Status(__ipc.ServerContext) (running string, temperature uint64, err error)
	// Start informs the PoolHeater to heat the pool to the given temperature until the duration expires.
	Start(ctx __ipc.ServerContext, temperature uint64, duration uint64) error
	// Stop informs the PoolHeater to cease heating the pool.
	Stop(__ipc.ServerContext) error
}

// PoolHeaterServerStubMethods is the server interface containing
// PoolHeater methods, as expected by ipc.Server.
// There is no difference between this interface and PoolHeaterServerMethods
// since there are no streaming methods.
type PoolHeaterServerStubMethods PoolHeaterServerMethods

// PoolHeaterServerStub adds universal methods to PoolHeaterServerStubMethods.
type PoolHeaterServerStub interface {
	PoolHeaterServerStubMethods
	// Describe the PoolHeater interfaces.
	Describe__() []__ipc.InterfaceDesc
	// Signature will be replaced with Describe__.
	Signature(ctx __ipc.ServerContext) (__ipc.ServiceSignature, error)
}

// PoolHeaterServer returns a server stub for PoolHeater.
// It converts an implementation of PoolHeaterServerMethods into
// an object that may be used by ipc.Server.
func PoolHeaterServer(impl PoolHeaterServerMethods) PoolHeaterServerStub {
	stub := implPoolHeaterServerStub{
		impl: impl,
	}
	// Initialize GlobState; always check the stub itself first, to handle the
	// case where the user has the Glob method defined in their VDL source.
	if gs := __ipc.NewGlobState(stub); gs != nil {
		stub.gs = gs
	} else if gs := __ipc.NewGlobState(impl); gs != nil {
		stub.gs = gs
	}
	return stub
}

type implPoolHeaterServerStub struct {
	impl PoolHeaterServerMethods
	gs   *__ipc.GlobState
}

func (s implPoolHeaterServerStub) Status(ctx __ipc.ServerContext) (string, uint64, error) {
	return s.impl.Status(ctx)
}

func (s implPoolHeaterServerStub) Start(ctx __ipc.ServerContext, i0 uint64, i1 uint64) error {
	return s.impl.Start(ctx, i0, i1)
}

func (s implPoolHeaterServerStub) Stop(ctx __ipc.ServerContext) error {
	return s.impl.Stop(ctx)
}

func (s implPoolHeaterServerStub) VGlob() *__ipc.GlobState {
	return s.gs
}

func (s implPoolHeaterServerStub) Describe__() []__ipc.InterfaceDesc {
	return []__ipc.InterfaceDesc{PoolHeaterDesc}
}

// PoolHeaterDesc describes the PoolHeater interface.
var PoolHeaterDesc __ipc.InterfaceDesc = descPoolHeater

// descPoolHeater hides the desc to keep godoc clean.
var descPoolHeater = __ipc.InterfaceDesc{
	Name:    "PoolHeater",
	PkgPath: "sample",
	Doc:     "// PoolHeater allows clients to control when the pool is being heated.",
	Methods: []__ipc.MethodDesc{
		{
			Name: "Status",
			Doc:  "// Status retrieves the PoolHeater's status (i.e., active, idle) and temperature.",
			OutArgs: []__ipc.ArgDesc{
				{"running", ``},     // string
				{"temperature", ``}, // uint64
				{"err", ``},         // error
			},
		},
		{
			Name: "Start",
			Doc:  "// Start informs the PoolHeater to heat the pool to the given temperature until the duration expires.",
			InArgs: []__ipc.ArgDesc{
				{"temperature", ``}, // uint64
				{"duration", ``},    // uint64
			},
			OutArgs: []__ipc.ArgDesc{
				{"", ``}, // error
			},
		},
		{
			Name: "Stop",
			Doc:  "// Stop informs the PoolHeater to cease heating the pool.",
			OutArgs: []__ipc.ArgDesc{
				{"", ``}, // error
			},
		},
	},
}

func (s implPoolHeaterServerStub) Signature(ctx __ipc.ServerContext) (__ipc.ServiceSignature, error) {
	// TODO(toddw): Replace with new Describe__ implementation.
	result := __ipc.ServiceSignature{Methods: make(map[string]__ipc.MethodSignature)}
	result.Methods["Start"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{
			{Name: "temperature", Type: 53},
			{Name: "duration", Type: 53},
		},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}
	result.Methods["Status"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{},
		OutArgs: []__ipc.MethodArgument{
			{Name: "running", Type: 3},
			{Name: "temperature", Type: 53},
			{Name: "err", Type: 65},
		},
	}
	result.Methods["Stop"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}

	result.TypeDefs = []__vdlutil.Any{
		__wiretype.NamedPrimitiveType{Type: 0x1, Name: "error", Tags: []string(nil)}}

	return result, nil
}
