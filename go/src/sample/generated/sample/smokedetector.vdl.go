// This file was auto-generated by the veyron vdl tool.
// Source: smokedetector.vdl

package sample

import (
	// The non-user imports are prefixed with "_gen_" to prevent collisions.
	_gen_context "veyron2/context"
	_gen_ipc "veyron2/ipc"
	_gen_naming "veyron2/naming"
	_gen_rt "veyron2/rt"
	_gen_vdlutil "veyron2/vdl/vdlutil"
	_gen_wiretype "veyron2/wiretype"
)

// TODO(bprosnitz) Remove this line once signatures are updated to use typevals.
// It corrects a bug where _gen_wiretype is unused in VDL pacakges where only bootstrap types are used on interfaces.
const _ = _gen_wiretype.TypeIDInvalid

// SmokeDetector is the interface the client binds and uses.
// SmokeDetector_ExcludingUniversal is the interface without internal framework-added methods
// to enable embedding without method collisions.  Not to be used directly by clients.
type SmokeDetector_ExcludingUniversal interface {
	Status(ctx _gen_context.T, opts ..._gen_ipc.CallOpt) (err error)
	Test(ctx _gen_context.T, opts ..._gen_ipc.CallOpt) (err error)
	Sensitivity(ctx _gen_context.T, sens int16, opts ..._gen_ipc.CallOpt) (err error)
}
type SmokeDetector interface {
	_gen_ipc.UniversalServiceMethods
	SmokeDetector_ExcludingUniversal
}

// SmokeDetectorService is the interface the server implements.
type SmokeDetectorService interface {
	Status(context _gen_ipc.ServerContext) (err error)
	Test(context _gen_ipc.ServerContext) (err error)
	Sensitivity(context _gen_ipc.ServerContext, sens int16) (err error)
}

// BindSmokeDetector returns the client stub implementing the SmokeDetector
// interface.
//
// If no _gen_ipc.Client is specified, the default _gen_ipc.Client in the
// global Runtime is used.
func BindSmokeDetector(name string, opts ..._gen_ipc.BindOpt) (SmokeDetector, error) {
	var client _gen_ipc.Client
	switch len(opts) {
	case 0:
		client = _gen_rt.R().Client()
	case 1:
		switch o := opts[0].(type) {
		case _gen_ipc.Client:
			client = o
		default:
			return nil, _gen_vdlutil.ErrUnrecognizedOption
		}
	default:
		return nil, _gen_vdlutil.ErrTooManyOptionsToBind
	}
	stub := &clientStubSmokeDetector{client: client, name: name}

	return stub, nil
}

// NewServerSmokeDetector creates a new server stub.
//
// It takes a regular server implementing the SmokeDetectorService
// interface, and returns a new server stub.
func NewServerSmokeDetector(server SmokeDetectorService) interface{} {
	return &ServerStubSmokeDetector{
		service: server,
	}
}

// clientStubSmokeDetector implements SmokeDetector.
type clientStubSmokeDetector struct {
	client _gen_ipc.Client
	name   string
}

func (__gen_c *clientStubSmokeDetector) Status(ctx _gen_context.T, opts ..._gen_ipc.CallOpt) (err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client.StartCall(ctx, __gen_c.name, "Status", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubSmokeDetector) Test(ctx _gen_context.T, opts ..._gen_ipc.CallOpt) (err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client.StartCall(ctx, __gen_c.name, "Test", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubSmokeDetector) Sensitivity(ctx _gen_context.T, sens int16, opts ..._gen_ipc.CallOpt) (err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client.StartCall(ctx, __gen_c.name, "Sensitivity", []interface{}{sens}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubSmokeDetector) UnresolveStep(ctx _gen_context.T, opts ..._gen_ipc.CallOpt) (reply []string, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client.StartCall(ctx, __gen_c.name, "UnresolveStep", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubSmokeDetector) Signature(ctx _gen_context.T, opts ..._gen_ipc.CallOpt) (reply _gen_ipc.ServiceSignature, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client.StartCall(ctx, __gen_c.name, "Signature", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubSmokeDetector) GetMethodTags(ctx _gen_context.T, method string, opts ..._gen_ipc.CallOpt) (reply []interface{}, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client.StartCall(ctx, __gen_c.name, "GetMethodTags", []interface{}{method}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

// ServerStubSmokeDetector wraps a server that implements
// SmokeDetectorService and provides an object that satisfies
// the requirements of veyron2/ipc.ReflectInvoker.
type ServerStubSmokeDetector struct {
	service SmokeDetectorService
}

func (__gen_s *ServerStubSmokeDetector) GetMethodTags(call _gen_ipc.ServerCall, method string) ([]interface{}, error) {
	// TODO(bprosnitz) GetMethodTags() will be replaces with Signature().
	// Note: This exhibits some weird behavior like returning a nil error if the method isn't found.
	// This will change when it is replaced with Signature().
	switch method {
	case "Status":
		return []interface{}{}, nil
	case "Test":
		return []interface{}{}, nil
	case "Sensitivity":
		return []interface{}{}, nil
	default:
		return nil, nil
	}
}

func (__gen_s *ServerStubSmokeDetector) Signature(call _gen_ipc.ServerCall) (_gen_ipc.ServiceSignature, error) {
	result := _gen_ipc.ServiceSignature{Methods: make(map[string]_gen_ipc.MethodSignature)}
	result.Methods["Sensitivity"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{
			{Name: "sens", Type: 35},
		},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}
	result.Methods["Status"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}
	result.Methods["Test"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}

	result.TypeDefs = []_gen_vdlutil.Any{
		_gen_wiretype.NamedPrimitiveType{Type: 0x1, Name: "error", Tags: []string(nil)}}

	return result, nil
}

func (__gen_s *ServerStubSmokeDetector) UnresolveStep(call _gen_ipc.ServerCall) (reply []string, err error) {
	if unresolver, ok := __gen_s.service.(_gen_ipc.Unresolver); ok {
		return unresolver.UnresolveStep(call)
	}
	if call.Server() == nil {
		return
	}
	var published []string
	if published, err = call.Server().Published(); err != nil || published == nil {
		return
	}
	reply = make([]string, len(published))
	for i, p := range published {
		reply[i] = _gen_naming.Join(p, call.Name())
	}
	return
}

func (__gen_s *ServerStubSmokeDetector) Status(call _gen_ipc.ServerCall) (err error) {
	err = __gen_s.service.Status(call)
	return
}

func (__gen_s *ServerStubSmokeDetector) Test(call _gen_ipc.ServerCall) (err error) {
	err = __gen_s.service.Test(call)
	return
}

func (__gen_s *ServerStubSmokeDetector) Sensitivity(call _gen_ipc.ServerCall, sens int16) (err error) {
	err = __gen_s.service.Sensitivity(call, sens)
	return
}
