// This file was auto-generated by the veyron vdl tool.
// Source: lightswitch.vdl

package sample

import (
	// The non-user imports are prefixed with "_gen_" to prevent collisions.
	_gen_veyron2 "veyron.io/veyron/veyron2"
	_gen_context "veyron.io/veyron/veyron2/context"
	_gen_ipc "veyron.io/veyron/veyron2/ipc"
	_gen_naming "veyron.io/veyron/veyron2/naming"
	_gen_vdlutil "veyron.io/veyron/veyron2/vdl/vdlutil"
	_gen_wiretype "veyron.io/veyron/veyron2/wiretype"
)

// TODO(bprosnitz) Remove this line once signatures are updated to use typevals.
// It corrects a bug where _gen_wiretype is unused in VDL pacakges where only bootstrap types are used on interfaces.
const _ = _gen_wiretype.TypeIDInvalid

// LightSwitch allows clients to manipulate a virtual light switch.
// LightSwitch is the interface the client binds and uses.
// LightSwitch_ExcludingUniversal is the interface without internal framework-added methods
// to enable embedding without method collisions.  Not to be used directly by clients.
type LightSwitch_ExcludingUniversal interface {
	// Status indicates whether the light is on or off.
	Status(ctx _gen_context.T, opts ..._gen_ipc.CallOpt) (reply string, err error)
	// FlipSwitch sets the light to on or off, depending on the input.
	FlipSwitch(ctx _gen_context.T, toOn bool, opts ..._gen_ipc.CallOpt) (err error)
}
type LightSwitch interface {
	_gen_ipc.UniversalServiceMethods
	LightSwitch_ExcludingUniversal
}

// LightSwitchService is the interface the server implements.
type LightSwitchService interface {

	// Status indicates whether the light is on or off.
	Status(context _gen_ipc.ServerContext) (reply string, err error)
	// FlipSwitch sets the light to on or off, depending on the input.
	FlipSwitch(context _gen_ipc.ServerContext, toOn bool) (err error)
}

// BindLightSwitch returns the client stub implementing the LightSwitch
// interface.
//
// If no _gen_ipc.Client is specified, the default _gen_ipc.Client in the
// global Runtime is used.
func BindLightSwitch(name string, opts ..._gen_ipc.BindOpt) (LightSwitch, error) {
	var client _gen_ipc.Client
	switch len(opts) {
	case 0:
		// Do nothing.
	case 1:
		if clientOpt, ok := opts[0].(_gen_ipc.Client); opts[0] == nil || ok {
			client = clientOpt
		} else {
			return nil, _gen_vdlutil.ErrUnrecognizedOption
		}
	default:
		return nil, _gen_vdlutil.ErrTooManyOptionsToBind
	}
	stub := &clientStubLightSwitch{defaultClient: client, name: name}

	return stub, nil
}

// NewServerLightSwitch creates a new server stub.
//
// It takes a regular server implementing the LightSwitchService
// interface, and returns a new server stub.
func NewServerLightSwitch(server LightSwitchService) interface{} {
	return &ServerStubLightSwitch{
		service: server,
	}
}

// clientStubLightSwitch implements LightSwitch.
type clientStubLightSwitch struct {
	defaultClient _gen_ipc.Client
	name          string
}

func (__gen_c *clientStubLightSwitch) client(ctx _gen_context.T) _gen_ipc.Client {
	if __gen_c.defaultClient != nil {
		return __gen_c.defaultClient
	}
	return _gen_veyron2.RuntimeFromContext(ctx).Client()
}

func (__gen_c *clientStubLightSwitch) Status(ctx _gen_context.T, opts ..._gen_ipc.CallOpt) (reply string, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client(ctx).StartCall(ctx, __gen_c.name, "Status", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubLightSwitch) FlipSwitch(ctx _gen_context.T, toOn bool, opts ..._gen_ipc.CallOpt) (err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client(ctx).StartCall(ctx, __gen_c.name, "FlipSwitch", []interface{}{toOn}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubLightSwitch) UnresolveStep(ctx _gen_context.T, opts ..._gen_ipc.CallOpt) (reply []string, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client(ctx).StartCall(ctx, __gen_c.name, "UnresolveStep", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubLightSwitch) Signature(ctx _gen_context.T, opts ..._gen_ipc.CallOpt) (reply _gen_ipc.ServiceSignature, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client(ctx).StartCall(ctx, __gen_c.name, "Signature", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

func (__gen_c *clientStubLightSwitch) GetMethodTags(ctx _gen_context.T, method string, opts ..._gen_ipc.CallOpt) (reply []interface{}, err error) {
	var call _gen_ipc.Call
	if call, err = __gen_c.client(ctx).StartCall(ctx, __gen_c.name, "GetMethodTags", []interface{}{method}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&reply, &err); ierr != nil {
		err = ierr
	}
	return
}

// ServerStubLightSwitch wraps a server that implements
// LightSwitchService and provides an object that satisfies
// the requirements of veyron2/ipc.ReflectInvoker.
type ServerStubLightSwitch struct {
	service LightSwitchService
}

func (__gen_s *ServerStubLightSwitch) GetMethodTags(call _gen_ipc.ServerCall, method string) ([]interface{}, error) {
	// TODO(bprosnitz) GetMethodTags() will be replaces with Signature().
	// Note: This exhibits some weird behavior like returning a nil error if the method isn't found.
	// This will change when it is replaced with Signature().
	switch method {
	case "Status":
		return []interface{}{}, nil
	case "FlipSwitch":
		return []interface{}{}, nil
	default:
		return nil, nil
	}
}

func (__gen_s *ServerStubLightSwitch) Signature(call _gen_ipc.ServerCall) (_gen_ipc.ServiceSignature, error) {
	result := _gen_ipc.ServiceSignature{Methods: make(map[string]_gen_ipc.MethodSignature)}
	result.Methods["FlipSwitch"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{
			{Name: "toOn", Type: 2},
		},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}
	result.Methods["Status"] = _gen_ipc.MethodSignature{
		InArgs: []_gen_ipc.MethodArgument{},
		OutArgs: []_gen_ipc.MethodArgument{
			{Name: "", Type: 3},
			{Name: "", Type: 65},
		},
	}

	result.TypeDefs = []_gen_vdlutil.Any{
		_gen_wiretype.NamedPrimitiveType{Type: 0x1, Name: "error", Tags: []string(nil)}}

	return result, nil
}

func (__gen_s *ServerStubLightSwitch) UnresolveStep(call _gen_ipc.ServerCall) (reply []string, err error) {
	if unresolver, ok := __gen_s.service.(_gen_ipc.Unresolver); ok {
		return unresolver.UnresolveStep(call)
	}
	if call.Server() == nil {
		return
	}
	var published []string
	if published, err = call.Server().Published(); err != nil || published == nil {
		return
	}
	reply = make([]string, len(published))
	for i, p := range published {
		reply[i] = _gen_naming.Join(p, call.Name())
	}
	return
}

func (__gen_s *ServerStubLightSwitch) Status(call _gen_ipc.ServerCall) (reply string, err error) {
	reply, err = __gen_s.service.Status(call)
	return
}

func (__gen_s *ServerStubLightSwitch) FlipSwitch(call _gen_ipc.ServerCall, toOn bool) (err error) {
	err = __gen_s.service.FlipSwitch(call, toOn)
	return
}
