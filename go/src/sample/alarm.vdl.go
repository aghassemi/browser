// This file was auto-generated by the veyron vdl tool.
// Source: alarm.vdl

package sample

import (
	// The non-user imports are prefixed with "__" to prevent collisions.
	__veyron2 "veyron.io/veyron/veyron2"
	__context "veyron.io/veyron/veyron2/context"
	__ipc "veyron.io/veyron/veyron2/ipc"
	__vdlutil "veyron.io/veyron/veyron2/vdl/vdlutil"
	__wiretype "veyron.io/veyron/veyron2/wiretype"
)

// TODO(toddw): Remove this line once the new signature support is done.
// It corrects a bug where __wiretype is unused in VDL pacakges where only
// bootstrap types are used on interfaces.
const _ = __wiretype.TypeIDInvalid

// AlarmClientMethods is the client interface
// containing Alarm methods.
//
// Alarm allows clients to manipulate an alarm and query its status.
type AlarmClientMethods interface {
	// Status returns the current status of the Alarm (i.e., armed, unarmed, panicking).
	Status(__context.T, ...__ipc.CallOpt) (string, error)
	// Arm sets the Alarm to the armed state.
	Arm(__context.T, ...__ipc.CallOpt) error
	// DelayArm sets the Alarm to the armed state after the given delay in seconds.
	DelayArm(ctx __context.T, seconds float32, opts ...__ipc.CallOpt) error
	// Unarm sets the Alarm to the unarmed state.
	Unarm(__context.T, ...__ipc.CallOpt) error
	// Panic sets the Alarm to the panicking state.
	Panic(__context.T, ...__ipc.CallOpt) error
}

// AlarmClientStub adds universal methods to AlarmClientMethods.
type AlarmClientStub interface {
	AlarmClientMethods
	__ipc.UniversalServiceMethods
}

// AlarmClient returns a client stub for Alarm.
func AlarmClient(name string, opts ...__ipc.BindOpt) AlarmClientStub {
	var client __ipc.Client
	for _, opt := range opts {
		if clientOpt, ok := opt.(__ipc.Client); ok {
			client = clientOpt
		}
	}
	return implAlarmClientStub{name, client}
}

type implAlarmClientStub struct {
	name   string
	client __ipc.Client
}

func (c implAlarmClientStub) c(ctx __context.T) __ipc.Client {
	if c.client != nil {
		return c.client
	}
	return __veyron2.RuntimeFromContext(ctx).Client()
}

func (c implAlarmClientStub) Status(ctx __context.T, opts ...__ipc.CallOpt) (o0 string, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Status", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implAlarmClientStub) Arm(ctx __context.T, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Arm", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implAlarmClientStub) DelayArm(ctx __context.T, i0 float32, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "DelayArm", []interface{}{i0}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implAlarmClientStub) Unarm(ctx __context.T, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Unarm", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implAlarmClientStub) Panic(ctx __context.T, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Panic", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implAlarmClientStub) Signature(ctx __context.T, opts ...__ipc.CallOpt) (o0 __ipc.ServiceSignature, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Signature", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implAlarmClientStub) GetMethodTags(ctx __context.T, method string, opts ...__ipc.CallOpt) (o0 []interface{}, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "GetMethodTags", []interface{}{method}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

// AlarmServerMethods is the interface a server writer
// implements for Alarm.
//
// Alarm allows clients to manipulate an alarm and query its status.
type AlarmServerMethods interface {
	// Status returns the current status of the Alarm (i.e., armed, unarmed, panicking).
	Status(__ipc.ServerContext) (string, error)
	// Arm sets the Alarm to the armed state.
	Arm(__ipc.ServerContext) error
	// DelayArm sets the Alarm to the armed state after the given delay in seconds.
	DelayArm(ctx __ipc.ServerContext, seconds float32) error
	// Unarm sets the Alarm to the unarmed state.
	Unarm(__ipc.ServerContext) error
	// Panic sets the Alarm to the panicking state.
	Panic(__ipc.ServerContext) error
}

// AlarmServerStubMethods is the server interface containing
// Alarm methods, as expected by ipc.Server.
// There is no difference between this interface and AlarmServerMethods
// since there are no streaming methods.
type AlarmServerStubMethods AlarmServerMethods

// AlarmServerStub adds universal methods to AlarmServerStubMethods.
type AlarmServerStub interface {
	AlarmServerStubMethods
	// GetMethodTags will be replaced with DescribeInterfaces.
	GetMethodTags(ctx __ipc.ServerContext, method string) ([]interface{}, error)
	// Signature will be replaced with DescribeInterfaces.
	Signature(ctx __ipc.ServerContext) (__ipc.ServiceSignature, error)
}

// AlarmServer returns a server stub for Alarm.
// It converts an implementation of AlarmServerMethods into
// an object that may be used by ipc.Server.
func AlarmServer(impl AlarmServerMethods) AlarmServerStub {
	stub := implAlarmServerStub{
		impl: impl,
	}
	// Initialize GlobState; always check the stub itself first, to handle the
	// case where the user has the Glob method defined in their VDL source.
	if gs := __ipc.NewGlobState(stub); gs != nil {
		stub.gs = gs
	} else if gs := __ipc.NewGlobState(impl); gs != nil {
		stub.gs = gs
	}
	return stub
}

type implAlarmServerStub struct {
	impl AlarmServerMethods
	gs   *__ipc.GlobState
}

func (s implAlarmServerStub) Status(ctx __ipc.ServerContext) (string, error) {
	return s.impl.Status(ctx)
}

func (s implAlarmServerStub) Arm(ctx __ipc.ServerContext) error {
	return s.impl.Arm(ctx)
}

func (s implAlarmServerStub) DelayArm(ctx __ipc.ServerContext, i0 float32) error {
	return s.impl.DelayArm(ctx, i0)
}

func (s implAlarmServerStub) Unarm(ctx __ipc.ServerContext) error {
	return s.impl.Unarm(ctx)
}

func (s implAlarmServerStub) Panic(ctx __ipc.ServerContext) error {
	return s.impl.Panic(ctx)
}

func (s implAlarmServerStub) VGlob() *__ipc.GlobState {
	return s.gs
}

func (s implAlarmServerStub) GetMethodTags(ctx __ipc.ServerContext, method string) ([]interface{}, error) {
	// TODO(toddw): Replace with new DescribeInterfaces implementation.
	switch method {
	case "Status":
		return []interface{}{}, nil
	case "Arm":
		return []interface{}{}, nil
	case "DelayArm":
		return []interface{}{}, nil
	case "Unarm":
		return []interface{}{}, nil
	case "Panic":
		return []interface{}{}, nil
	default:
		return nil, nil
	}
}

func (s implAlarmServerStub) Signature(ctx __ipc.ServerContext) (__ipc.ServiceSignature, error) {
	// TODO(toddw) Replace with new DescribeInterfaces implementation.
	result := __ipc.ServiceSignature{Methods: make(map[string]__ipc.MethodSignature)}
	result.Methods["Arm"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}
	result.Methods["DelayArm"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{
			{Name: "seconds", Type: 25},
		},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}
	result.Methods["Panic"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}
	result.Methods["Status"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 3},
			{Name: "", Type: 65},
		},
	}
	result.Methods["Unarm"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}

	result.TypeDefs = []__vdlutil.Any{
		__wiretype.NamedPrimitiveType{Type: 0x1, Name: "error", Tags: []string(nil)}}

	return result, nil
}
