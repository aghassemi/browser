// This file was auto-generated by the veyron vdl tool.
// Source: sprinkler.vdl

package sample

import (
	// The non-user imports are prefixed with "__" to prevent collisions.
	__veyron2 "veyron.io/veyron/veyron2"
	__context "veyron.io/veyron/veyron2/context"
	__ipc "veyron.io/veyron/veyron2/ipc"
	__vdlutil "veyron.io/veyron/veyron2/vdl/vdlutil"
	__wiretype "veyron.io/veyron/veyron2/wiretype"
)

// TODO(toddw): Remove this line once the new signature support is done.
// It corrects a bug where __wiretype is unused in VDL pacakges where only
// bootstrap types are used on interfaces.
const _ = __wiretype.TypeIDInvalid

// SprinklerClientMethods is the client interface
// containing Sprinkler methods.
//
// Sprinkler allows clients to control the virtual sprinkler.
type SprinklerClientMethods interface {
	// Status retrieves the Sprinkler's status (i.e., active, idle)
	Status(__context.T, ...__ipc.CallOpt) (string, error)
	// Start causes the Sprinkler to emit water for the given duration (in seconds).
	Start(ctx __context.T, duration uint16, opts ...__ipc.CallOpt) error
	// Stop causes the Sprinkler to cease watering.
	Stop(__context.T, ...__ipc.CallOpt) error
}

// SprinklerClientStub adds universal methods to SprinklerClientMethods.
type SprinklerClientStub interface {
	SprinklerClientMethods
	__ipc.UniversalServiceMethods
}

// SprinklerClient returns a client stub for Sprinkler.
func SprinklerClient(name string, opts ...__ipc.BindOpt) SprinklerClientStub {
	var client __ipc.Client
	for _, opt := range opts {
		if clientOpt, ok := opt.(__ipc.Client); ok {
			client = clientOpt
		}
	}
	return implSprinklerClientStub{name, client}
}

type implSprinklerClientStub struct {
	name   string
	client __ipc.Client
}

func (c implSprinklerClientStub) c(ctx __context.T) __ipc.Client {
	if c.client != nil {
		return c.client
	}
	return __veyron2.RuntimeFromContext(ctx).Client()
}

func (c implSprinklerClientStub) Status(ctx __context.T, opts ...__ipc.CallOpt) (o0 string, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Status", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implSprinklerClientStub) Start(ctx __context.T, i0 uint16, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Start", []interface{}{i0}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implSprinklerClientStub) Stop(ctx __context.T, opts ...__ipc.CallOpt) (err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Stop", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&err); ierr != nil {
		err = ierr
	}
	return
}

func (c implSprinklerClientStub) Signature(ctx __context.T, opts ...__ipc.CallOpt) (o0 __ipc.ServiceSignature, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "Signature", nil, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

func (c implSprinklerClientStub) GetMethodTags(ctx __context.T, method string, opts ...__ipc.CallOpt) (o0 []interface{}, err error) {
	var call __ipc.Call
	if call, err = c.c(ctx).StartCall(ctx, c.name, "GetMethodTags", []interface{}{method}, opts...); err != nil {
		return
	}
	if ierr := call.Finish(&o0, &err); ierr != nil {
		err = ierr
	}
	return
}

// SprinklerServerMethods is the interface a server writer
// implements for Sprinkler.
//
// Sprinkler allows clients to control the virtual sprinkler.
type SprinklerServerMethods interface {
	// Status retrieves the Sprinkler's status (i.e., active, idle)
	Status(__ipc.ServerContext) (string, error)
	// Start causes the Sprinkler to emit water for the given duration (in seconds).
	Start(ctx __ipc.ServerContext, duration uint16) error
	// Stop causes the Sprinkler to cease watering.
	Stop(__ipc.ServerContext) error
}

// SprinklerServerStubMethods is the server interface containing
// Sprinkler methods, as expected by ipc.Server.  The difference between
// this interface and SprinklerServerMethods is that the first context
// argument for each method is always ipc.ServerCall here, while it is either
// ipc.ServerContext or a typed streaming context there.
type SprinklerServerStubMethods interface {
	// Status retrieves the Sprinkler's status (i.e., active, idle)
	Status(__ipc.ServerCall) (string, error)
	// Start causes the Sprinkler to emit water for the given duration (in seconds).
	Start(call __ipc.ServerCall, duration uint16) error
	// Stop causes the Sprinkler to cease watering.
	Stop(__ipc.ServerCall) error
}

// SprinklerServerStub adds universal methods to SprinklerServerStubMethods.
type SprinklerServerStub interface {
	SprinklerServerStubMethods
	// GetMethodTags will be replaced with DescribeInterfaces.
	GetMethodTags(call __ipc.ServerCall, method string) ([]interface{}, error)
	// Signature will be replaced with DescribeInterfaces.
	Signature(call __ipc.ServerCall) (__ipc.ServiceSignature, error)
}

// SprinklerServer returns a server stub for Sprinkler.
// It converts an implementation of SprinklerServerMethods into
// an object that may be used by ipc.Server.
func SprinklerServer(impl SprinklerServerMethods) SprinklerServerStub {
	stub := implSprinklerServerStub{
		impl: impl,
	}
	// Initialize GlobState; always check the stub itself first, to handle the
	// case where the user has the Glob method defined in their VDL source.
	if gs := __ipc.NewGlobState(stub); gs != nil {
		stub.gs = gs
	} else if gs := __ipc.NewGlobState(impl); gs != nil {
		stub.gs = gs
	}
	return stub
}

type implSprinklerServerStub struct {
	impl SprinklerServerMethods
	gs   *__ipc.GlobState
}

func (s implSprinklerServerStub) Status(call __ipc.ServerCall) (string, error) {
	return s.impl.Status(call)
}

func (s implSprinklerServerStub) Start(call __ipc.ServerCall, i0 uint16) error {
	return s.impl.Start(call, i0)
}

func (s implSprinklerServerStub) Stop(call __ipc.ServerCall) error {
	return s.impl.Stop(call)
}

func (s implSprinklerServerStub) VGlob() *__ipc.GlobState {
	return s.gs
}

func (s implSprinklerServerStub) GetMethodTags(call __ipc.ServerCall, method string) ([]interface{}, error) {
	// TODO(toddw): Replace with new DescribeInterfaces implementation.
	switch method {
	case "Status":
		return []interface{}{}, nil
	case "Start":
		return []interface{}{}, nil
	case "Stop":
		return []interface{}{}, nil
	default:
		return nil, nil
	}
}

func (s implSprinklerServerStub) Signature(call __ipc.ServerCall) (__ipc.ServiceSignature, error) {
	// TODO(toddw) Replace with new DescribeInterfaces implementation.
	result := __ipc.ServiceSignature{Methods: make(map[string]__ipc.MethodSignature)}
	result.Methods["Start"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{
			{Name: "duration", Type: 51},
		},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}
	result.Methods["Status"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 3},
			{Name: "", Type: 65},
		},
	}
	result.Methods["Stop"] = __ipc.MethodSignature{
		InArgs: []__ipc.MethodArgument{},
		OutArgs: []__ipc.MethodArgument{
			{Name: "", Type: 65},
		},
	}

	result.TypeDefs = []__vdlutil.Any{
		__wiretype.NamedPrimitiveType{Type: 0x1, Name: "error", Tags: []string(nil)}}

	return result, nil
}
